services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: dev
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=development
    env_file:
      - ./frontend/.env
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    depends_on:
      - api

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
      target: dev
    ports:
      - '3001:3001'
      - '9229:9229'
    environment:
      - NODE_ENV=development
    env_file:
      - ./api/.env
    volumes:
      - ./api/src:/app/src
      - ./api/uploads:/app/uploads
    depends_on:
      - postgres

  postgres:
    image: postgres:16-alpine
    ports:
      - '5432:5432'
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USER} -d ${DB_NAME}']
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
